/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/cho4036/virtualrouter/pkg/apis/networkcontroller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LoadBalancerRuleLister helps list LoadBalancerRules.
// All objects returned here must be treated as read-only.
type LoadBalancerRuleLister interface {
	// List lists all LoadBalancerRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.LoadBalancerRule, err error)
	// LoadBalancerRules returns an object that can list and get LoadBalancerRules.
	LoadBalancerRules(namespace string) LoadBalancerRuleNamespaceLister
	LoadBalancerRuleListerExpansion
}

// loadBalancerRuleLister implements the LoadBalancerRuleLister interface.
type loadBalancerRuleLister struct {
	indexer cache.Indexer
}

// NewLoadBalancerRuleLister returns a new LoadBalancerRuleLister.
func NewLoadBalancerRuleLister(indexer cache.Indexer) LoadBalancerRuleLister {
	return &loadBalancerRuleLister{indexer: indexer}
}

// List lists all LoadBalancerRules in the indexer.
func (s *loadBalancerRuleLister) List(selector labels.Selector) (ret []*v1.LoadBalancerRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.LoadBalancerRule))
	})
	return ret, err
}

// LoadBalancerRules returns an object that can list and get LoadBalancerRules.
func (s *loadBalancerRuleLister) LoadBalancerRules(namespace string) LoadBalancerRuleNamespaceLister {
	return loadBalancerRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LoadBalancerRuleNamespaceLister helps list and get LoadBalancerRules.
// All objects returned here must be treated as read-only.
type LoadBalancerRuleNamespaceLister interface {
	// List lists all LoadBalancerRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.LoadBalancerRule, err error)
	// Get retrieves the LoadBalancerRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.LoadBalancerRule, error)
	LoadBalancerRuleNamespaceListerExpansion
}

// loadBalancerRuleNamespaceLister implements the LoadBalancerRuleNamespaceLister
// interface.
type loadBalancerRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LoadBalancerRules in the indexer for a given namespace.
func (s loadBalancerRuleNamespaceLister) List(selector labels.Selector) (ret []*v1.LoadBalancerRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.LoadBalancerRule))
	})
	return ret, err
}

// Get retrieves the LoadBalancerRule from the indexer for a given namespace and name.
func (s loadBalancerRuleNamespaceLister) Get(name string) (*v1.LoadBalancerRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("loadbalancerrule"), name)
	}
	return obj.(*v1.LoadBalancerRule), nil
}
