/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/tmax-cloud/virtualrouter/pkg/apis/networkcontroller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FireWallRuleLister helps list FireWallRules.
// All objects returned here must be treated as read-only.
type FireWallRuleLister interface {
	// List lists all FireWallRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.FireWallRule, err error)
	// FireWallRules returns an object that can list and get FireWallRules.
	FireWallRules(namespace string) FireWallRuleNamespaceLister
	FireWallRuleListerExpansion
}

// fireWallRuleLister implements the FireWallRuleLister interface.
type fireWallRuleLister struct {
	indexer cache.Indexer
}

// NewFireWallRuleLister returns a new FireWallRuleLister.
func NewFireWallRuleLister(indexer cache.Indexer) FireWallRuleLister {
	return &fireWallRuleLister{indexer: indexer}
}

// List lists all FireWallRules in the indexer.
func (s *fireWallRuleLister) List(selector labels.Selector) (ret []*v1.FireWallRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FireWallRule))
	})
	return ret, err
}

// FireWallRules returns an object that can list and get FireWallRules.
func (s *fireWallRuleLister) FireWallRules(namespace string) FireWallRuleNamespaceLister {
	return fireWallRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FireWallRuleNamespaceLister helps list and get FireWallRules.
// All objects returned here must be treated as read-only.
type FireWallRuleNamespaceLister interface {
	// List lists all FireWallRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.FireWallRule, err error)
	// Get retrieves the FireWallRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.FireWallRule, error)
	FireWallRuleNamespaceListerExpansion
}

// fireWallRuleNamespaceLister implements the FireWallRuleNamespaceLister
// interface.
type fireWallRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FireWallRules in the indexer for a given namespace.
func (s fireWallRuleNamespaceLister) List(selector labels.Selector) (ret []*v1.FireWallRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FireWallRule))
	})
	return ret, err
}

// Get retrieves the FireWallRule from the indexer for a given namespace and name.
func (s fireWallRuleNamespaceLister) Get(name string) (*v1.FireWallRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("firewallrule"), name)
	}
	return obj.(*v1.FireWallRule), nil
}
